var tipuesearch = {"pages": [{'title': '內容管理', 'text': '專案倉儲 \n https://github.com/mdecourse/kll3pp \xa0 \n 網際內容管理 \n https://github.com/chiamingyen/cmsimfly \xa0', 'tags': '', 'url': '內容管理.html'}, {'title': '機械設計', 'text': '電腦輔助機械設計: \n Onshape:\xa0 https://www.onshape.com/ \xa0 \n Solvespace:\xa0 http://solvespace.com \xa0 \n FreeCAD:\xa0 https://www.freecadweb.org/ \xa0 \n 機構設計與合成:\xa0 \n https://github.com/KmolYuan/Pyslvs-PyQt5 \xa0 \n 控制系統設計與模擬: \n \xa0 http://www.coppeliarobotics.com/ \xa0 \n 影像辨識: \n https://github.com/kmolLin/object_detection/tree/train_branch \xa0 \n https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10 \xa0 \n', 'tags': '', 'url': '機械設計.html'}, {'title': '電子電機', 'text': '控制板 \n https://reprap.org/wiki/MKS_GEN \xa0 \n 目前使用的控制板為  3D printer board MKS Gen L V1.0 controller \n \n 其他控制板: \n 3D Printer Parts MKS Gen V1.4 Control Board Mega 2560 R3 motherboard \xa0 \n \n 步進馬達驅動器 \n Microstep driver \n \n Power Supply \n MEAN WELL NED-35A \n \n 步進馬達 \n RepRap 40mm Stepper Motor \n', 'tags': '', 'url': '電子電機.html'}, {'title': '資訊程式', 'text': '程式語言 \n http://mde.tw/python-course/ \xa0 \n 序列資料傳送 \n https://github.com/kmolLin/Pyquino \xa0', 'tags': '', 'url': '資訊程式.html'}, {'title': 'CMSimfly 更新', 'text': '將 KLL3PP 的內容管理系統更新, 具有靜態內容關鍵字搜尋功能. \n 更新時, 除了替換 flaskapp.py 程式檔案外, 還需要加入 static 目錄中的\xa0tipuesearch 目錄, 其中為靜態資料搜尋用的 Javascript 程式碼. \n', 'tags': '', 'url': 'CMSimfly 更新.html'}, {'title': 'Python', 'text': '', 'tags': '', 'url': 'Python.html'}, {'title': 'Python 安裝', 'text': 'Windows 操作系統 \n 利用瀏覽器連結至\xa0 https://www.python.org./../downloads/ \xa0後, 從\xa0 https://www.python.org./../downloads/windows/ \xa0下載\xa0 https://www.python.org/ftp/python/3.7.2/python-3.7.2rc1-amd64.exe , 在 Windows 10 64 位元環境中安裝, 即可從 cmd 命令列中, 以 python 指令使用互動式指令環境. \n 可攜 Python 系統:\xa0 p37-18.12.7z \xa0(下載解開壓縮檔案後, 以 start.bat 啟動後即可使用) \n Ubuntu 操作系統 \n 比較方便使用的 Ubuntu 操作系統, 可以在 Windows 10 64 位元環境中, 安裝  Virtualbox  虛擬環境後, 再安裝 Ubuntu LTS 版本.', 'tags': '', 'url': 'Python 安裝.html'}, {'title': '電腦硬體', 'text': '\n \n \n \n \n \n \n \n computer overview and hardware.pdf \n ( https://www.cs.auckland.ac.nz/compsci111ssc/lectures/LectureSlides/ ) \n Computer 硬體 \n \n Personal Computer 類別 \n \n 機架式(rack)電腦伺服器 \n \n UPS (Uninterruptible Power Supply) 不斷電系統 \n \n Motherboard 主機板 \n \n PCI ( Peripheral Component Interconnect) 網路卡 \n \n Power Supply 電源供應器 \n \n 個人桌上型電腦內部 \n \n 筆記型電腦內部 \n', 'tags': '', 'url': '電腦硬體.html'}, {'title': 'Python 語法', 'text': 'Python 3 官方教材:\xa0 https://docs.python.org/3/index.html \xa0 \n Python tutorial:\xa0 https://docs.python.org/3/tutorial/index.html \xa0(英文) \n Python 教學:\xa0 https://python-doc-tw.github.io/tutorial/index.html \xa0 \n 網頁上的 Python - Brython:\xa0 https://www.brython.info/static_doc/en/intro.html \xa0 (解譯式) \n 網頁上的 Python GUI- Flexx:\xa0 https://flexx.readthedocs.io/en/stable/ \xa0(轉譯式) \n \n \n \n  for ggame  \n \n \n \n \n  Cango 程式庫  \n \n \n \n  for Konva 程式庫  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n 開始練習 print() 用法, 並著手建立函式 \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .py   \n Run   Output   清除 Reload \n \n \n  ****************************** keyword start  \n \n \n  ****************************** keyword end  \n  ***************************** slide ex1 start  \n \n \n \n  ***************************** slide ex1 end  \n  ***************************** slide ex2 start  \n \n \n \n  ***************************** slide ex2 end  \n  ***************************** slide ex3 start  \n \n \n \n  ***************************** slide ex3 end  \n  ***************************** slide ex4 start  \n \n \n \n  ***************************** slide ex4 end  \n  line drawing start  \n \n \n \n  line drawing ends  \n \n  flag ex start  \n \n \n \n  flag ex ends  \n \n  bunny start  \n \n \n \n  bunny ends  \n \n  clear canvas start  \n \n \n \n  clear canvas ends  \n \n  cango spur gears start  \n \n \n \n  cango spur gears ends  \n \n  temp convert start  \n \n \n \n  temp convert ends  \n \n  forloop start  \n \n \n \n  forloop ends  \n \n  guess start  \n \n \n \n  guess ends  \n \n  autoguess start  \n \n \n \n  autoguess ends  \n \n  lottery start  \n \n \n \n  lottery ends  \n \n  bezier starts  \n \n \n \n  bezier ends  \n \n  turtle1 starts  \n \n \n \n  turtle1 ends  \n \n  turtle2 starts  \n \n \n \n  turtle2 ends  \n \n  turtle3 starts  \n \n \n \n  turtle3 ends  \n \n  turtle4 starts  \n \n \n \n  turtle4 ends  \n \n  turtle5 starts  \n \n \n \n  turtle5 ends  \n \n  turtle6 starts  \n \n \n \n  turtle6 ends  \n \n  turtle7 starts  \n \n \n \n  turtle7 ends  \n \n  turtle8 starts  \n \n \n \n  turtle8 ends  \n \n  konva1 starts  \n \n \n \n  konva1 ends  \n Keyword Ex1 Ex2 Ex3 Ex4 Ex5 Guess Autoguess Lottery Temp Draw Flag Bezier Turtle1 Turtle2 Turtle3 Turtle4 Turtle5 Turtle6 Turtle7 Turtle8 Konva1 Bunny Spur Clear \n 參考資料: \n turtle_intro.pdf \n turtle_intro2.pdf \n 其他擷取程式的方式:  http://mde.tw/2017springvcp/blog/web-based-python.html \xa0', 'tags': '', 'url': 'Python 語法.html'}, {'title': 'Brython', 'text': 'Documentation \n https://brython.info/static_doc/en/intro.html?lang=en \xa0 \n Demo \n https://www.brython.info/demo.html?lang=en# \xa0 \n Gallery \n https://brython.info/gallery/gallery_en.html \xa0 \n More Examples \n https://github.com/brython-dev/brython/wiki/Brython-in-the-wild \xa0 \n 繪圖範例 \n \n \n \n \n \n \n \n \n \n Geometric Constraint Solver \n https://www.mattkeeter.com/projects/constraints/ \xa0 \n Ajax 範例 \n 伺服器端使用 Flask \n from flask import Flask, render_template, request, jsonify\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n@app.route(\'/\')\ndef index():\n    return render_template(\'index.html\')\n\n@app.route(\'/add_numbers\', methods=[\'POST\'])\ndef add_numbers():\n    a = request.form.get(\'a\', 0, type=int)\n    b = request.form.get(\'b\', 0, type=int)\n    #return jsonify(result = a+b)\n    # 必須傳回字串?\n    return str(a+b)\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n \n 客戶端使用 Brython \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>\n    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">\n    <script src="http://brython.info/src/brython_dist.js"></script>\n  </head>\n  <body onload="brython()">\n  <script type="text/python">\n    from browser import document\n    from browser import ajax\n    # https://www.brython.info/static_doc/en/ajax.html\n    \n    def on_complete(req):\n        document["txt_area"] .clear()\n        if req.status==200 or req.status==0:\n            document["txt_area"] <= req.text\n        else:\n            document["txt_area"] <= "error "+req.text\n            \n    def get(url):  \n        # req 從 ajax 模組中的 ajax 類別建立案例, 為一個 ajax 物件        \n        req = ajax.ajax()\n        # a 為 id="A" 輸入欄位中所輸入的值\n        a = document[\'A\'].value\n        # b 為 id="B" 輸入欄位中所輸入的值        \n        b = document[\'B\'].value\n        # ajax 物件中的 bind 方法, 第一個輸入變數為 evt, \'complete\' 表示 ajax 從伺服器取值完成後, 執行 on_complete 函式\n        req.bind(\'complete\', on_complete)\n        req.open(\'POST\', url, True)\n        req.set_header(\'content-type\',\'application/x-www-form-urlencoded\')\n        req.send({"a": a, "b":b}) \n    \n    # 使用者按下 id="calculate" 按鈕, 將會執行上述 get("/add_numbers") 函式\n    document[\'calculate\'].bind(\'click\',lambda ev:get(\'/add_numbers\'))\n\n</script>\n  \n    <div class="container">\n      <div class="header">\n        <h3 class="text-muted">Brython ajax example</h3>\n      </div>\n      <div>\n    <input type="text" id="A" size="5" name="a"> +\n    <input type="text" id ="B" size="5" name="b"> =\n    <div id="txt_area"></div>\n    <p><button id="calculate">calculate server side</button>\n      </form>\n      </div>\n    </div>\n  </body>\n</html> \n 參考資料: \n https://stackoverflow.com/questions/41957490/send-canvas-image-data-uint8clampedarray-to-flask-server-via-ajax \xa0', 'tags': '', 'url': 'Brython.html'}, {'title': '參考資料', 'text': 'Python 教材 \n https://www.python-course.eu \xa0 \n http://mde.tw/cp2018 \xa0 \n https://mdecp2018.github.io/finalproject-bgx \xa0 \n 物件導向 \n https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/ \xa0 \n https://python-textbok.readthedocs.io/en/1.0/Object_Oriented_Programming.html \xa0 \n Python 網際框架 \n http://flask.pocoo.org/ \n https://www.djangoproject.com/ \xa0 \n Parsing \n http://loup-vaillant.fr/tutorials/earley-parsing/ \xa0 \n https://tomassetti.me/parsing-in-python/ \xa0( pdf ) \n https://github.com/lark-parser/lark \xa0( erezsh_lark.pdf ) \n Algorithm \n https://medium.com/100-days-of-algorithms \xa0 ( https://medium.com/@tomas.bouda \xa0) \n 其他程式語言 \n https://en.wikipedia.org/wiki/JavaScript \xa0', 'tags': '', 'url': '參考資料.html'}, {'title': '電子書', 'text': 'Learn to Program with Python 3 - A Step-by-Step Guide to Programming \n https://link.springer.com/book/10.1007/978-1-4842-3879-0 \xa0 \n Beginning Python - From Novice to Professional \n https://link.springer.com/book/10.1007/978-1-4842-0028-5 \xa0 \n Programming with Python \n https://link.springer.com/book/10.1007/978-981-10-3277-6 \xa0 \n Python Recipes Handbook - A Problem-Solution Approach \n https://link.springer.com/book/10.1007/978-1-4842-0241-8 \xa0 \n Beginning Django Web Application Development and Deployment with Python \n https://link.springer.com/book/10.1007/978-1-4842-2787-9 \xa0 \n Python 2 and 3 Compatibility - With Six and Python-Future Libraries \n https://link.springer.com/book/10.1007/978-1-4842-2955-2 \xa0 \n Elementary Mechanics Using Python - A Modern Course Combining Analytical and Numerical Techniques \n https://link.springer.com/book/10.1007/978-3-319-19596-4 \xa0(Python2) \n Programming for Computations - Python A Gentle Introduction to Numerical Simulations with Python \n https://link.springer.com/book/10.1007/978-3-319-32428-9 \xa0(Python2) \n LaTeX in 24 Hours - A Practical Guide for Scientific Writing \n https://link.springer.com/book/10.1007/978-3-319-47831-9 \xa0 \n Practical LaTeX \n https://link.springer.com/book/10.1007/978-3-319-06425-3 \xa0 \n LaTeX and Friends \n https://link.springer.com/book/10.1007/978-3-642-23816-1 \xa0 \n Math into LATEX \n https://link.springer.com/book/10.1007/978-1-4612-2134-0 \xa0', 'tags': '', 'url': '電子書.html'}]};